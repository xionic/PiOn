/**
 * Copyright 2019 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import { LitElement, html, css } from "../../../lit-element/lit-element.js";
import "../../../@polymer/paper-dialog/paper-dialog.js";
/**
 * @deprecatedApply - required for @apply / invoking @apply css var convention
 */

import "../../../@polymer/polymer/lib/elements/custom-style.js";
/**
 * `simple-modal`
 * `A simple modal that ensures accessibility and stack order context appropriately`
 * CSS Variables: ```
--simple-modal-titlebar-color: #444;
--simple-modal-titlebar-background: #ddd;
--simple-modal-header-color: #222;
--simple-modal-header-background: #ccc;
--simple-modal-content-container-color: #222;
--simple-modal-content-container-background: #fff;
--simple-modal-buttons-color: unset;
--simple-modal-buttons-background: unset;
--simple-modal-button-color: var(--simple-modal-buttons-color);
--simple-modal-button-background: var(--simple-modal-buttons-background-color);
```
 * @demo ./demo/index.html demo
 * @demo ./demo/css.html styling simple-modal via CSS
 * @demo ./demo/details.html styling simple-modal via event details
 * @demo ./demo/template.html using simple-modal-template
 * @element simple-modal
 */

class SimpleModal extends LitElement {
  /* REQUIRED FOR TOOLING DO NOT TOUCH */

  /**
   * convention
   */
  static get tag() {
    return "simple-modal";
  }
  /**
   * HTMLElement
   */


  constructor() {
    super();
    this.title = "";
    this.opened = false;
    this.closeLabel = "Close";
    this.closeIcon = "close";
    this.modal = false;
    setTimeout(() => {
      import("../../../@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js");
      import("../../../@polymer/paper-button/paper-button.js");
      import("../../../@polymer/iron-icons/iron-icons.js");
      import("../../../@polymer/iron-icon/iron-icon.js");
    }, 0);
  }
  /**
   * LitElement
   */


  updated(changedProperties) {
    changedProperties.forEach((oldValue, propName) => {
      if (propName == "opened") {
        this._openedChanged(this[propName]);
      }
    });
  }
  /**
   * LitElement ready
   */


  firstUpdated() {
    this.shadowRoot.querySelector("#simple-modal-content").addEventListener("neon-animation-finish", this._ironOverlayClosed.bind(this));
  }
  /**
   * HTMLElement
   */


  connectedCallback() {
    super.connectedCallback();
    setTimeout(() => {
      console.log("connectedCallback", this);
      window.addEventListener("simple-modal-hide", this.close.bind(this));
      window.addEventListener("simple-modal-show", this.showEvent.bind(this));
    }, 0);
  }
  /**
   * HTMLElement
   */


  disconnectedCallback() {
    window.removeEventListener("simple-modal-hide", this.close.bind(this));
    window.removeEventListener("simple-modal-show", this.showEvent.bind(this));
    super.disconnectedCallback();
  }
  /**
   * Ensure everything is visible in what's been expanded.
   */


  _resizeContent(e) {
    // fake a resize event to make contents happy
    window.dispatchEvent(new Event("resize"));
  }
  /**
   * show event call to open the modal and display it's content
   *
   */


  showEvent(e) {
    console.log("show", this, e); // if we're already opened and we get told to open again....
    // swap out the contents

    if (this.opened) {
      // wipe the slot of our modal
      while (this.firstChild !== null) {
        this.removeChild(this.firstChild);
      }

      setTimeout(() => {
        this.show(e.detail.title, e.detail.elements, e.detail.invokedBy, e.detail.id, e.detail.modalClass, e.detail.styles, e.detail.clone, e.detail.modal);
      }, 100);
    } else {
      this.show(e.detail.title, e.detail.elements, e.detail.invokedBy, e.detail.id, e.detail.modalClass, e.detail.styles, e.detail.clone, e.detail.modal);
    }
  }
  /**
   * Show the modal and display the material
   */


  show(title, elements, invokedBy, id = null, modalClass = null, styles = null, clone = false, modal = false) {
    this.invokedBy = invokedBy;
    this.modal = modal;
    this.title = title;
    let element; // append element areas into the appropriate slots
    // ensuring they are set if it wasn't previously

    let slots = ["header", "content", "buttons"];

    if (id) {
      this.setAttribute("id", id);
    } else {
      this.removeAttribute("id");
    }

    this.setAttribute("style", "");

    if (styles) {
      ["--simple-modal-width", "--simple-modal-height", "--simple-modal-min-width", "--simple-modal-min-height", "--simple-modal-max-width", "--simple-modal-max-height", "--simple-modal-titlebar-color", "--simple-modal-titlebar-height", "--simple-modal-titlebar-line-height", "--simple-modal-titlebar-background", "--simple-modal-titlebar-padding", "--simple-modal-header-color", "--simple-modal-header-background", "--simple-modal-header-padding", "--simple-modal-content-container-color", "--simple-modal-content-container-background", "--simple-modal-content-padding", "--simple-modal-buttons-color", "--simple-modal-buttons-background", "--simple-modal-buttons-padding", "--simple-modal-button-color", "--simple-modal-button-background"].forEach(prop => {
        this.style.setProperty(prop, styles[prop] || "unset");
      });
    }

    if (modalClass) {
      this.setAttribute("class", modalClass);
    } else {
      this.removeAttribute("class");
    }

    for (var i in slots) {
      if (elements[slots[i]]) {
        if (clone) {
          element = elements[slots[i]].cloneNode(true);
        } else {
          element = elements[slots[i]];
        }

        element.setAttribute("slot", slots[i]);
        this.appendChild(element);
      }
    } // minor delay to help the above happen prior to opening


    setTimeout(() => {
      this.opened = true;
      this.shadowRoot.querySelector("#close").focus();

      this._resizeContent();
    }, 100);
  }
  /**
   * check state and if we should clean up on close.
   * This keeps the DOM tiddy and allows animation to happen gracefully.
   */


  animationEnded(e) {
    // wipe the slot of our modal
    this.title = "";

    while (this.firstChild !== null) {
      this.removeChild(this.firstChild);
    }

    if (this.invokedBy) {
      setTimeout(() => {
        this.invokedBy.focus();
      }, 500);
    }
  }
  /**
   * Close the modal and do some clean up
   */


  close() {
    this.shadowRoot.querySelector("#dialog").close();
  }

  openedChangedEvent(e) {
    this.opened = e.detail.value;
  } // Observer opened for changes


  _openedChanged(newValue) {
    if (typeof newValue !== typeof undefined && !newValue) {
      this.animationEnded();
      const evt = new CustomEvent("simple-modal-closed", {
        bubbles: true,
        cancelable: true,
        detail: {
          opened: false,
          invokedBy: this.invokedBy
        }
      });
      this.dispatchEvent(evt);
    } else if (newValue) {
      const evt = new CustomEvent("simple-modal-opened", {
        bubbles: true,
        cancelable: true,
        detail: {
          opened: true,
          invokedBy: this.invokedBy
        }
      });
      this.dispatchEvent(evt);
    }
  }
  /**
   * If there is a title, aria-labelledby should point to #simple-modal-title
   */


  _getAriaLabelledby(title) {
    return !title ? null : "simple-modal-title";
  }
  /**
   * If there is no title, supply a generic aria-label
   */


  _getAriaLabel(title) {
    return !title ? "Modal Dialog" : null;
  }

  _ironOverlayClosed(e) {
    e.preventDefault();
    e.stopPropagation();
  }

}

window.customElements.define(SimpleModal.tag, SimpleModal);
export { SimpleModal }; // register globally so we can make sure there is only one

window.SimpleModal = window.SimpleModal || {}; // request if this exists. This helps invoke the element existing in the dom
// as well as that there is only one of them. That way we can ensure everything
// is rendered through the same modal

window.SimpleModal.requestAvailability = () => {
  if (!window.SimpleModal.instance) {
    window.SimpleModal.instance = document.createElement("simple-modal");
    document.body.appendChild(window.SimpleModal.instance);
  }

  return window.SimpleModal.instance;
};